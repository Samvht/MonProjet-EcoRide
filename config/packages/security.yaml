security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        App\Entity\Utilisateur: 'auto'
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Entity\Utilisateur
                property: email
        # used to reload user from session & other features (e.g. switch_user)
        
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
    
        main:
            security: true
            lazy: true
            provider: app_user_provider 
            form_login: 
                login_path: app_connexion 
                check_path: app_connexion
                username_parameter: connexion[email]
                password_parameter: connexion[password]
                default_target_path: app_utilisateur 
                form_only: true
                post_only: true
            logout: 
                path: app_logout 
                target: /connexion
            # Utilisation cookie pour utilisateur reste connecté après authentification
            remember_me:
                secret: '%env(APP_SECRET)%'
        # public_area:
            # pattern: 
            # security: true # enlevé car bloquant pour l'authentification

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html # the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/accueil, roles: PUBLIC_ACCESS } #public accès à accueil
        - { path: ^/contact, roles: PUBLIC_ACCESS } #public accès à contact
        - { path: ^/connexion, roles: PUBLIC_ACCESS } #public accès page connexion
        - { path: ^/covoiturage, roles: PUBLIC_ACCESS } #public accès covoiturage
        #page à créer- { path: ^/covoiturage/details, roles: PUBLIC_ACCESS } #public accès aux détails covoiturage
        - { path: ^/admin, roles: ROLE_ADMIN } #admin accès à tous le site
        - { path: ^/utilisateur, roles: ROLE_USER } #utilisateur connecté accès à son historique covoiturage
        # page à créer- { path: ^/covoiturage/participer, roles: ROLE_USER } #utilisateur connecté peut participer à un covoit
        - { path: ^/, roles: ROLE_USER } #utilisateur connecté accès à tous le site

    role_hierarchy:
        ROLE_ADMIN: ROLE_USER #Admin possède tous les accès
        ROLE_USER : PUBLIC_ACCESS #utilisateur classique possède aussi les accès du public

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
